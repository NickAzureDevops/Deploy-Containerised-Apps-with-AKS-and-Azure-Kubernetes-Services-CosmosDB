parameters:
  - name: environment
    displayName: Environment
    type: string
    default: dev
  - name: apply
    displayName: Apply
    type: boolean
    default: true
  - name: destroy
    displayName: Destroy
    type: boolean
    default: false

trigger: none

variables:
  serviceConnectionName: SP
  backendAzureRmResourceGroupName: rg-tfstate
  backendAzureRmStorageAccountName: saterraformdevops
  backendAzureRmContainerName: devtfstate
  backendAzureRmKey: Festive-Tech-Calender-2022-dev.tfstate
  workingDirectory: "$(System.DefaultWorkingDirectory)/3-Infrastructure-Deployment/terraform/environments/dev"

pool:
  vmImage: ubuntu-latest

jobs:
  - job: CDDev
    displayName: Deploy
    steps:
      - checkout: self
        fetchDepth: 0
        clean: true

      - task: TerraformInstaller@0
        displayName: "Install Terraform [latest]"
        inputs:
          terraformVersion: "latest"

      - task: TerraformTaskV2@2
        displayName: "Terraform Init"
        inputs:
          provider: "azurerm"
          command: "init"
          workingDirectory: "${{ variables.workingDirectory }}"
          backendServiceArm: "${{ variables.serviceConnectionName}}"
          backendAzureRmResourceGroupName: "${{ variables.backendAzureRmResourceGroupName }}"
          backendAzureRmStorageAccountName: "${{ variables.backendAzureRmStorageAccountName }}"
          backendAzureRmContainerName: "${{ variables.backendAzureRmContainerName }}"
          backendAzureRmKey: "${{ variables.backendAzureRmKey }}"

      - task: TerraformTaskV2@2
        condition: eq('${{ parameters.destroy }}', 'true')
        displayName: Terraform Destroy
        name: terraformDestroy
        inputs:
          provider: "azurerm"
          command: "destroy"
          commandOptions: '-var="environment=${{ parameters.environment }}"'
          workingDirectory: "${{ variables.workingDirectory }}"
          environmentServiceNameAzureRM: "${{ variables.serviceConnectionName }}"

      - task: TerraformTaskV2@2
        displayName: "Terraform Plan"
        # Run plan if apply is true, or if both apply and destroy are false
        condition: or(and(succeeded(), eq('${{ parameters.apply }}', 'true')), and(succeeded(), eq('${{ parameters.apply }}', 'false'), eq('${{ parameters.destroy }}', 'false')))
        name: terraformPlan
        inputs:
          provider: "azurerm"
          command: "plan"
          commandOptions: '-var="environment=${{ parameters.environment }}" -out=$(Build.SourceBranchName).tfplan'
          workingDirectory: "${{ variables.workingDirectory }}"
          environmentServiceNameAzureRM: "${{ variables.serviceConnectionName }}"

      - task: TerraformTaskV2@2
        condition: and(succeeded(), eq('${{ parameters.apply }}', 'true'))
        displayName: Terraform Apply
        name: terraformApply
        inputs:
          provider: "azurerm"
          command: "apply"
          commandOptions: $(Build.SourceBranchName).tfplan
          workingDirectory: "${{ variables.workingDirectory }}"
          environmentServiceNameAzureRM: "${{ variables.serviceConnectionName }}"
