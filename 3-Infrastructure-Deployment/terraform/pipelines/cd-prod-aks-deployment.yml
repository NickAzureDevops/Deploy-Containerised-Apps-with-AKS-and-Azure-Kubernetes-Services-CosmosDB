parameters:
  - name: environment
    displayName: Environment
    type: string
    default: prd
  - name: apply
    displayName: Apply
    type: boolean
    default: true
  - name: destroy
    displayName: Destroy
    type: boolean
    default: false
  

trigger: none

variables:
- group: festivetechcalender2022
- name: serviceConnectionName
  value: SP
- name: backendAzureRmResourceGroupName
  value: rg-tfstate
- name: backendAzureRmStorageAccountName
  value: saterraformdevops
- name: backendAzureRmContainerName
  value: devtfstate
- name: backendAzureRmKey
  value: Festive-Tech-Calender-2022-prd.tfstate
- name: workingDirectory
  value: "$(System.DefaultWorkingDirectory)/3-Infrastructure-Deployment/terraform/environments/prod/"
- name: aks_resourece_group
  value: rg-aks-prod-festivetech-uksouth
- name: aksname
  value: aks-prod-festivetech-uksouth
- name: repository
  value: 'wishlist'
- name: dockerfile
  value: '$(Build.SourcesDirectory)/2-Deploy-to-ACR/WishList/Dockerfile'
- name: containerRegistry
  value: 'acrprodfestivetechuksouth.azurecr.io'
- name: tag
  value: 'latest'
- name: helmVersion
  value: 3.4.1

pool:
  vmImage: ubuntu-latest

stages :
  - stage: DeployAKS
    jobs:
    - job: CDDev
      displayName: Deploy
      steps:
        - checkout: self
          fetchDepth: 0
          clean: true

        - task: TerraformInstaller@0
          displayName: "Install Terraform [latest]"
          inputs:
            terraformVersion: "latest"

        - task: TerraformTaskV2@2
          displayName: "Terraform Init"
          inputs:
            provider: "azurerm"
            command: "init"
            workingDirectory: "${{ variables.workingDirectory }}"
            backendServiceArm: "${{ variables.serviceConnectionName}}"
            backendAzureRmResourceGroupName: "${{ variables.backendAzureRmResourceGroupName }}"
            backendAzureRmStorageAccountName: "${{ variables.backendAzureRmStorageAccountName }}"
            backendAzureRmContainerName: "${{ variables.backendAzureRmContainerName }}"
            backendAzureRmKey: "${{ variables.backendAzureRmKey }}"

        - task: TerraformTaskV2@2
          condition: eq('${{ parameters.destroy }}', 'true')
          displayName: Terraform Destroy
          name: terraformDestroy
          inputs:
            provider: "azurerm"
            command: "destroy"
            commandOptions: '-var="environment=${{ parameters.environment }}"'
            workingDirectory: "${{ variables.workingDirectory }}"
            environmentServiceNameAzureRM: "${{ variables.serviceConnectionName }}"

        - task: TerraformTaskV2@2
          displayName: "Terraform Plan"
          # Run plan if apply is true, or if both apply and destroy are false
          condition: or(and(succeeded(), eq('${{ parameters.apply }}', 'true')), and(succeeded(), eq('${{ parameters.apply }}', 'false'), eq('${{ parameters.destroy }}', 'false')))
          name: terraformPlan
          inputs:
            provider: "azurerm"
            command: "plan"
            commandOptions: '-var="environment=${{ parameters.environment }}" -out=$(Build.SourceBranchName).tfplan'
            workingDirectory: "${{ variables.workingDirectory }}"
            environmentServiceNameAzureRM: "${{ variables.serviceConnectionName }}"

        - task: TerraformTaskV2@2
          condition: and(succeeded(), eq('${{ parameters.apply }}', 'true'))
          displayName: Terraform Apply
          name: terraformApply
          inputs:
            provider: "azurerm"
            command: "apply"
            commandOptions: $(Build.SourceBranchName).tfplan
            workingDirectory: "${{ variables.workingDirectory }}"
            environmentServiceNameAzureRM: "${{ variables.serviceConnectionName }}"

        - task: Docker@2
          displayName: Build and push an image to container registry
          inputs:
            command: buildAndPush
            repository: ${{ variables.repository }}
            dockerfile: ${{ variables.dockerfile }}
            containerRegistry: ${{ variables.containerRegistry }}
            tags: |
              latest
              $(Build.BuildId)

        - task: AzureCLI@2
          displayName: 'Authenicate to AKS'
          inputs:
            azureSubscription: "${{ variables.serviceConnectionName }}"
            scriptType: bash
            scriptLocation: inlineScript
            addSpnToEnvironment: true
            inlineScript: |
              #!/usr/bin/env bash
              set -x
              # Get AKS Credentials
              az aks get-credentials -g ${{ variables.aks_resourece_group }} -n ${{ variables.aksname }} --admin --overwrite-existing 

        - task: AzureCLI@2
          displayName: 'Deploy App to AKS Cluster'
          inputs:
            azureSubscription: "${{ variables.serviceConnectionName }}"
            scriptType: bash
            scriptLocation: inlineScript
            addSpnToEnvironment: true
            inlineScript: |
              #!/usr/bin/env bash
              set -x
              # Create Namespace
              kubectl apply -f 3-Infrastructure-Deployment/terraform/scripts/namespace.yaml

              # Create secret for appinsights
              kubectl -n wishlist create secret generic aikey --from-literal=aisecret=$(AIKEY)

              # Apply app
              kubectl apply -f 3-Infrastructure-Deployment/terraform/scripts/deployment.yml
          

  - stage: DeployHelm
    dependsOn: [DeployAKS]
    jobs:
      - job: DeployHelm
        steps:
              - task: AzureCLI@2
                displayName: 'Install Cert Manager'
                inputs:
                  azureSubscription: "${{ variables.serviceConnectionName }}"
                  scriptType: bash
                  scriptLocation: inlineScript
                  addSpnToEnvironment: true
                  inlineScript: |
                    #!/usr/bin/env bash
                    set -x
                    # Install Cert Manager 
                    az aks get-credentials -g ${{ variables.aks_resourece_group }} -n ${{ variables.aksname }} --admin 
                    kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.8.2/cert-manager.yaml
                    kubectl label namespace cert-manager cert-manager.io/disable-validation=true
                        
              - task: HelmInstaller@1
                displayName: 'install helm'
                inputs:
                  helmVersionToInstall: $(helmVersion)

              - task: AzureCLI@2
                displayName: 'Add repo'
                inputs:
                  azureSubscription: "${{ variables.serviceConnectionName }}"
                  scriptType: bash
                  scriptLocation: inlineScript
                  addSpnToEnvironment: true
                  inlineScript: |
                    #!/usr/bin/env bash
                    set -x
                    helm repo add aso2 https://raw.githubusercontent.com/Azure/azure-service-operator/main/v2/charts

              - task: AzureCLI@2
                displayName: 'Install Chart'
                inputs:
                  azureSubscription: "${{ variables.serviceConnectionName }}"
                  scriptType: bash
                  scriptLocation: inlineScript
                  addSpnToEnvironment: true
                  inlineScript: |
                    #!/usr/bin/env bash
                    set -x
                    helm repo update 
                    helm upgrade --install --devel aso2 aso2/azure-service-operator \
                        --create-namespace \
                        --namespace=azureserviceoperator-system  \
                        --set azureSubscriptionID=$(ASOSubscriptionID) \
                        --set azureTenantID=$(ASOTenantID) \
                        --set azureClientID=$(ADOAppID) \
                        --set azureClientSecret=$(ASOClientSecret)
